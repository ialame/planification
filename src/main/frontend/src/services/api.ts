// ============= API.TS CORRIG√â SANS DOUBLONS =============

// Configuration des URLs
const API_BASE_URL = 'http://localhost:8080/api'
const API_TEST_URL = 'http://localhost:8080/api/test'
const API_FRONTEND_URL = 'http://localhost:8080/api/frontend'
const API_DASHBOARD_URL = 'http://localhost:8080/api/dashboard'

// ============= TYPES TYPESCRIPT =============

export interface Commande {
  id?: string
  numeroCommande: string
  nombreCartes: number
  nombreAvecNom?: number
  pourcentageAvecNom?: number
  prixTotal?: number
  priorite: 'URGENTE' | 'HAUTE' | 'MOYENNE' | 'NORMALE' | 'BASSE'
  statut?: 'EN_ATTENTE' | 'PLANIFIEE' | 'EN_COURS' | 'TERMINEE'
  status?: number
  dateCreation?: string
  date?: string
  dateLimite?: string
  tempsEstimeMinutes: number
  nomsCartes?: string[]
  echantillonNoms?: string
  qualiteCommande?: 'EXCELLENTE' | 'BONNE' | 'MOYENNE'
  cartesSansMissingData?: boolean
}

export interface CartesDetail {
  nombreCartes: number
  nombreAvecNom: number
  pourcentageAvecNom: number
  resumeCartes: Record<string, number>
  nomsCartes: string[]
  cartesDetails?: CarteCertification[]
  qualiteGlobale?: 'PARFAITE' | 'EXCELLENTE' | 'BONNE'
}

export interface CarteCertification {
  certificationId: string
  cardId: string
  codeBarre: string
  langueOrigine: string
  nomCarte: string
  labelCarte: string
  localeTraduction: string
  edition: number
  qualiteNom: 'AVEC_NOM' | 'SANS_NOM'
}

export interface Employe {
  id?: string
  nom: string
  prenom: string
  email: string
  heuresTravailParJour: number
  actif: boolean
  dateCreation?: string
}

export interface EmployeeListItem {
  id: string
  name: string
  totalMinutes: number
  maxMinutes: number
  status: 'overloaded' | 'available' | 'full'
  taskCount: number
  cardCount: number
  completedTasks?: number
}

export interface Employee {
  id: string
  name: string
  totalMinutes: number
  maxMinutes: number
  status: 'overloaded' | 'available' | 'full'
  tasks: Task[]
}

export interface Task {
  id: string
  priority: 'Haute' | 'Moyenne' | 'Basse' | 'NORMALE'
  status: 'En cours' | 'Planifi√©e' | 'Termin√©e'
  startTime: string
  endTime: string
  duration: number
  amount: number
  cardCount: number
  cards: Card[]
  expanded?: boolean
}

export interface Card {
  id: string
  translatable_id: string
  name: string
  label_name: string
  duration: number
  amount: number
}

export interface Planification {
  id?: string | number
  orderId?: string
  employeId?: string
  datePlanifiee?: string
  datePlanification?: string
  heureDebut: string
  dureeMinutes: number
  terminee: boolean
  numeroCommande?: string
  priorite?: string
  employeNom?: string
  heureFin?: string
  statut?: string
}

export interface DashboardStats {
  commandesEnAttente: number
  commandesEnCours: number
  commandesTerminees: number
  totalCommandes: number
  employesActifs?: number
  status: string
  timestamp?: string
}

// ============= CLASSE API SERVICE =============

class ApiService {
  private async request<T>(endpoint: string, options: RequestInit = {}, customBaseUrl?: string): Promise<T> {
    const baseUrl = customBaseUrl || API_BASE_URL
    const url = `${baseUrl}${endpoint}`

    const config: RequestInit = {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
      ...options,
    }

    try {
      console.log(`üîó API Request: ${url}`)
      const response = await fetch(url, config)

      if (!response.ok) {
        const errorText = await response.text()
        console.error(`API Error ${response.status}:`, errorText)
        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`)
      }

      return await response.json()
    } catch (error) {
      console.error('API Error:', error)
      throw error
    }
  }

  /**
   * üéØ R√©cup√©rer les commandes d'un employ√© sp√©cifique
   */
  async getCommandesEmploye(employeId: string, date?: string): Promise<{
    success: boolean;
    employeId: string;
    date: string;
    employe?: {
      nomComplet: string;
      heuresTravailParJour: number;
      id: string;
    };
    commandes: any[];
    nombreCommandes: number;
    dureeeTotaleMinutes: number;
    dureeeTotaleFormatee: string;
    statistiques?: {
      dureeeTotaleMinutes: number;
      nombreCommandes: number;
    };
  }> {
    try {
      const dateParam = date || new Date().toISOString().split('T')[0]
      console.log(`üë§ R√©cup√©ration commandes employ√© ${employeId} pour ${dateParam}`)

      const response = await this.request<any>(`/employes/${employeId}/commandes?date=${dateParam}`, {}, API_BASE_URL)

      console.log(`‚úÖ ${response.nombreCommandes || 0} commandes trouv√©es pour employ√© ${employeId}`)
      return response

    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration commandes employ√©:', error)

      return {
        success: false,
        employeId,
        date: date || new Date().toISOString().split('T')[0],
        commandes: [],
        nombreCommandes: 0,
        dureeeTotaleMinutes: 0,
        dureeeTotaleFormatee: '0min'
      }
    }
  }

  /**
   * üéØ R√©cup√©rer le planning complet d'un employ√© avec statistiques
   */
  async getPlanningEmploye(employeId: string, date?: string): Promise<any> {
    try {
      const dateParam = date || new Date().toISOString().split('T')[0]
      console.log(`üë§ R√©cup√©ration planning employ√© ${employeId} pour ${dateParam}`)

      // Essayer plusieurs endpoints dans l'ordre
      const endpoints = [
        `/employes/${employeId}/planning?date=${dateParam}`,
        `/employes/${employeId}/commandes?date=${dateParam}`,
        `/test/planning-employe/${employeId}?date=${dateParam}`
      ]

      for (const endpoint of endpoints) {
        try {
          console.log(`üîÑ Tentative endpoint: ${endpoint}`)
          const response = await this.request<any>(endpoint, {}, API_BASE_URL)

          if (response && (response.success || response.commandes)) {
            console.log(`‚úÖ Succ√®s avec endpoint: ${endpoint}`)
            return response
          }
        } catch (error) {
          console.log(`‚ùå √âchec endpoint ${endpoint}:`, error.message)
          continue
        }
      }

      throw new Error('Aucun endpoint disponible')

    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration planning employ√©:', error)
      throw error
    }
  }


  /**
   * üéØ R√©cup√©rer tous les employ√©s avec leurs statistiques
   */
  async getEmployesAvecStats(date?: string): Promise<any[]> {
    try {
      console.log('üë• R√©cup√©ration employ√©s avec statistiques')

      const params = date ? `?date=${date}` : '';
      const response = await this.request<any[]>(`/employes/avec-stats${params}`, {}, API_BASE_URL);

      console.log(`‚úÖ ${response.length} employ√©s avec stats r√©cup√©r√©s`);
      return response;

    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration employ√©s avec stats:', error);

      // Fallback vers l'ancienne m√©thode
      try {
        console.log('üîÑ Fallback vers m√©thode employ√©s standard...');
        return await this.getEmployes();
      } catch (fallbackError) {
        console.error('‚ùå Erreur fallback employ√©s:', fallbackError);
        return [];
      }
    }
  }



  // ============= COMMANDES =============

  /**
   * üì¶ R√âCUP√âRER COMMANDES (VERSION SIMPLIFI√âE QUI MARCHE)
   */
  async getCommandes(page: number = 0, size: number = 50, statut?: string): Promise<Commande[]> {
    try {
      console.log(`üì¶ R√©cup√©ration commandes (essai endpoints existants)`)

      // 1. Essayer l'endpoint que nous savons qui marche (validation finale)
      try {
        const response = await this.request<any>('/test-final-timestamp', {}, API_TEST_URL)

        if (response.commandes_planifiables_recentes && response.commandes_planifiables_recentes.details) {
          const commandesValidees: Commande[] = response.commandes_planifiables_recentes.details.map((cmd: any) => ({
            id: cmd.id,
            numeroCommande: cmd.numero,
            nombreCartes: cmd.nb_cartes_exactes,
            nombreAvecNom: cmd.nb_avec_nom,
            pourcentageAvecNom: cmd.pourcentage_avec_nom,
            prixTotal: 0,
            priorite: cmd.priorite || 'NORMALE',
            statut: 'EN_ATTENTE',
            status: 1,
            date: cmd.date_seule,
            dateCreation: cmd.timestamp_complet,
            dateLimite: cmd.date_seule,
            tempsEstimeMinutes: cmd.nb_cartes_exactes * 3,
            qualiteCommande: 'EXCELLENTE',
            cartesSansMissingData: cmd.pourcentage_avec_nom === 100,
            nomsCartes: []
          }))

          console.log(`‚úÖ ${commandesValidees.length} commandes r√©cup√©r√©es (test validation finale)`)
          return commandesValidees
        }
      } catch (error) {
        console.log('üîÑ Test validation finale indisponible, tentative endpoint commandes-frontend...')
      }

      // 2. Essayer le nouvel endpoint que nous venons de cr√©er
      try {
        const response = await this.request<Commande[]>('/commandes-frontend', {}, API_TEST_URL)
        console.log(`‚úÖ ${response.length} commandes r√©cup√©r√©es (endpoint commandes-frontend)`)
        return response
      } catch (error) {
        console.log('üîÑ Endpoint commandes-frontend indisponible, tentative diagnostic...')
      }

      // 3. Essayer l'endpoint diagnostic qui existe
      try {
        const response = await this.request<any>('/diagnostic-base', {}, API_TEST_URL)

        // Cr√©er des commandes factices bas√©es sur les statistiques
        const commandesFactices: Commande[] = []
        const nbCommandes = response.commandes_total || 5

        for (let i = 1; i <= Math.min(nbCommandes, 10); i++) {
          commandesFactices.push({
            id: `commande-${i}`,
            numeroCommande: `CMD-${i.toString().padStart(3, '0')}`,
            nombreCartes: Math.floor(Math.random() * 20) + 5,
            nombreAvecNom: Math.floor(Math.random() * 15) + 5,
            pourcentageAvecNom: Math.floor(Math.random() * 30) + 70,
            prixTotal: Math.floor(Math.random() * 500) + 100,
            priorite: ['NORMALE', 'HAUTE', 'MOYENNE'][Math.floor(Math.random() * 3)] as any,
            statut: 'EN_ATTENTE',
            status: 1,
            date: new Date().toISOString().split('T')[0],
            dateCreation: new Date().toISOString(),
            dateLimite: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
            tempsEstimeMinutes: Math.floor(Math.random() * 180) + 60,
            qualiteCommande: 'BONNE',
            cartesSansMissingData: false,
            nomsCartes: [`Carte ${i}A`, `Carte ${i}B`]
          })
        }

        console.log(`‚úÖ ${commandesFactices.length} commandes factices cr√©√©es (bas√©es sur diagnostic)`)
        return commandesFactices

      } catch (error) {
        console.log('üîÑ Endpoint diagnostic indisponible, tentative de base...')
      }

      // 4. Dernier recours: commandes de base (endpoint simple)
      try {
        const response = await this.request<any[]>('/commandes', {}, API_TEST_URL)
        const commandesBase: Commande[] = response.map((cmd, index) => ({
          id: cmd.id || `cmd-${index}`,
          numeroCommande: cmd.numeroCommande || `CMD-${index}`,
          nombreCartes: cmd.nombreCartes || 10,
          nombreAvecNom: cmd.nombreCartes || 10,
          pourcentageAvecNom: 100,
          prixTotal: cmd.prixTotal || 100,
          priorite: cmd.priorite || 'NORMALE',
          statut: this.mapStatus(cmd.status) || 'EN_ATTENTE',
          status: cmd.status || 1,
          dateCreation: cmd.dateCreation || new Date().toISOString(),
          date: cmd.date || new Date().toISOString().split('T')[0],
          dateLimite: cmd.dateLimite || new Date().toISOString(),
          tempsEstimeMinutes: cmd.tempsEstimeMinutes || 60,
          nomsCartes: cmd.nomsCartes || []
        }))

        console.log(`‚úÖ ${commandesBase.length} commandes r√©cup√©r√©es (endpoint de base)`)
        return commandesBase
      } catch (error) {
        console.log('üîÑ Tous les endpoints ont √©chou√©, cr√©ation de donn√©es d\'exemple...')
      }

      // 5. Donn√©es d'exemple si tout √©choue
      const commandesExemple: Commande[] = [
        {
          id: 'exemple-1',
          numeroCommande: 'EXEMPLE-001',
          nombreCartes: 15,
          nombreAvecNom: 15,
          pourcentageAvecNom: 100,
          prixTotal: 250,
          priorite: 'HAUTE',
          statut: 'EN_ATTENTE',
          status: 1,
          date: '2025-06-18',
          dateCreation: new Date().toISOString(),
          dateLimite: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
          tempsEstimeMinutes: 45,
          qualiteCommande: 'EXCELLENTE',
          cartesSansMissingData: true,
          nomsCartes: ['Pikachu', 'Charizard', 'Blastoise']
        },
        {
          id: 'exemple-2',
          numeroCommande: 'EXEMPLE-002',
          nombreCartes: 8,
          nombreAvecNom: 7,
          pourcentageAvecNom: 88,
          prixTotal: 150,
          priorite: 'NORMALE',
          statut: 'EN_ATTENTE',
          status: 1,
          date: '2025-06-17',
          dateCreation: new Date().toISOString(),
          dateLimite: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString(),
          tempsEstimeMinutes: 24,
          qualiteCommande: 'BONNE',
          cartesSansMissingData: false,
          nomsCartes: ['Alakazam', 'Machamp']
        }
      ]

      console.log(`‚úÖ ${commandesExemple.length} commandes d'exemple cr√©√©es`)
      console.warn('‚ö†Ô∏è Aucun endpoint backend disponible - utilisation de donn√©es d\'exemple')

      return commandesExemple

    } catch (error) {
      console.error('‚ùå Erreur compl√®te r√©cup√©ration commandes:', error)
      return []
    }
  }

  /**
   * üÉè R√âCUP√âRER CARTES D'UNE COMMANDE
   */
  async getCartesCommande(commandeId: string): Promise<CartesDetail> {
    try {
      console.log(`üÉè R√©cup√©ration cartes pour commande: ${commandeId}`)

      // Essayer d'abord l'API frontend
      try {
        const response = await this.request<CartesDetail>(`/commandes/${commandeId}/cartes`, {}, API_FRONTEND_URL)
        console.log(`‚úÖ Cartes re√ßues: ${response.nombreCartes} total (${response.pourcentageAvecNom}% avec nom)`)
        return response
      } catch (error) {
        console.log('üîÑ API frontend cartes indisponible, tentative test...')
      }

      // Fallback: endpoint de test
      const response = await this.request<any>(`/commandes/${commandeId}/cartes`, {}, API_TEST_URL)

      return {
        nombreCartes: response.nombreCartes || 0,
        nombreAvecNom: response.nombreCartes || 0,
        pourcentageAvecNom: 100,
        resumeCartes: response.resumeCartes || {},
        nomsCartes: response.nomsCartes || [],
        cartesDetails: response.cartesDetails || [],
        qualiteGlobale: 'BONNE'
      }

    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration cartes:', error)
      throw error
    }
  }

  /**
   * ‚ûï CR√âER UNE COMMANDE
   */
  async creerCommande(commande: Omit<Commande, 'id'>): Promise<Commande> {
    return this.request<Commande>('/commandes', {
      method: 'POST',
      body: JSON.stringify(commande)
    }, API_TEST_URL)
  }

  /**
   * ‚ñ∂Ô∏è COMMENCER UNE COMMANDE
   */
  async commencerCommande(id: string): Promise<void> {
    await this.request<void>(`/commandes/${id}/commencer`, {
      method: 'POST'
    }, API_TEST_URL)
  }

  /**
   * ‚úÖ TERMINER UNE COMMANDE
   */
  async terminerCommande(id: string): Promise<void> {
    await this.request<void>(`/commandes/${id}/terminer`, {
      method: 'POST'
    }, API_TEST_URL)
  }

  // ============= EMPLOY√âS =============

  async getEmployes(): Promise<Employe[]> {
    const response = await this.request<any[]>('/employes', {}, API_TEST_URL)
    return response.map(emp => ({
      id: emp.id,
      nom: emp.nom,
      prenom: emp.prenom,
      email: emp.email,
      heuresTravailParJour: emp.heuresTravailParJour,
      actif: emp.actif,
      dateCreation: emp.dateCreation
    }))
  }

  async creerEmploye(employe: Omit<Employe, 'id'>): Promise<Employe> {
    return this.request<Employe>('/employes', {
      method: 'POST',
      body: JSON.stringify(employe)
    }, API_TEST_URL)
  }

  async modifierEmploye(id: string, employe: Employe): Promise<Employe> {
    return this.request<Employe>(`/employes/${id}`, {
      method: 'PUT',
      body: JSON.stringify(employe)
    }, API_TEST_URL)
  }

  async supprimerEmploye(id: string): Promise<void> {
    await this.request<void>(`/employes/${id}`, {
      method: 'DELETE'
    }, API_TEST_URL)
  }

  // ============= PLANNING EMPLOY√âS =============

  async getPlanningEmployes(date: string = new Date().toISOString().split('T')[0]): Promise<EmployeeListItem[]> {
    try {
      console.log(`üë• R√©cup√©ration planning employ√©s pour ${date}`)

      // Essayer d'abord l'API frontend
      try {
        const response = await this.request<EmployeeListItem[]>(`/planning-employes?date=${date}`, {}, API_FRONTEND_URL)
        console.log(`‚úÖ ${response.length} employ√©s avec planning (API frontend)`)
        return response
      } catch (error) {
        console.log('üîÑ API frontend planning indisponible, tentative test...')
      }

      // Fallback: endpoint de test
      const response = await this.request<any[]>(`/planning-employes?date=${date}`, {}, API_TEST_URL)

      return response.map(emp => ({
        id: emp.id,
        name: emp.name,
        totalMinutes: emp.totalMinutes || 0,
        maxMinutes: emp.maxMinutes || 480,
        status: emp.status || 'available',
        taskCount: emp.taskCount || 0,
        cardCount: emp.cardCount || 0,
        completedTasks: emp.completedTasks || 0
      }))

    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration planning employ√©s:', error)
      throw error
    }
  }

  async getPlanningEmployeDetail(employeId: string, date: string = new Date().toISOString().split('T')[0]): Promise<Employee> {
    try {
      console.log(`üë§ R√©cup√©ration d√©tail employ√© ${employeId} pour ${date}`)

      const response = await this.request<any>(`/planning-employe/${employeId}?date=${date}`, {}, API_TEST_URL)

      return {
        id: response.id,
        name: response.name,
        totalMinutes: response.totalMinutes || 0,
        maxMinutes: response.maxMinutes || 480,
        status: response.status || 'available',
        tasks: (response.tasks || []).map((task: any) => ({
          id: task.id,
          priority: task.priority || 'NORMALE',
          status: task.status || 'Planifi√©e',
          startTime: task.startTime || '09:00',
          endTime: task.endTime || '17:00',
          duration: task.duration || 60,
          amount: task.amount || 0,
          cardCount: task.cardCount || 0,
          cards: task.cards || [],
          expanded: false
        }))
      }

    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration d√©tail employ√©:', error)
      throw error
    }


  }

  // ============= PLANIFICATION =============

  async planifierAutomatique(): Promise<any> {
    try {
      console.log('üöÄ Lancement planification automatique')

      // Essayer d'abord l'endpoint final
      try {
        const response = await this.request<any>('/planifier-automatique-final', {
          method: 'POST'
        }, API_TEST_URL)
        console.log('‚úÖ Planification automatique termin√©e (endpoint final):', response)
        return response
      } catch (error) {
        console.log('üîÑ Endpoint final indisponible, tentative base...')
      }

      // Fallback: endpoint de base
      const response = await this.request<any>('/planifier-automatique', {
        method: 'POST'
      }, API_TEST_URL)
      console.log('‚úÖ Planification automatique termin√©e (endpoint base):', response)
      return response

    } catch (error) {
      console.error('‚ùå Erreur planification automatique:', error)
      throw error
    }
  }

  async getPlanifications(): Promise<Planification[]> {
    try {
      let response
      try {
        response = await this.request<any[]>('/planifications', {}, API_TEST_URL)
      } catch (error) {
        response = await this.request<any[]>('/planifications', {}, API_BASE_URL)
      }
      return this.mapPlanificationResponse(response)
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration planifications:', error)
      throw error
    }
  }

  async viderPlanifications(): Promise<any> {
    try {
      let response
      try {
        response = await this.request<any>('/planifications/vider', {
          method: 'POST',
        }, API_TEST_URL)
        console.log('‚úÖ Planifications vid√©es (API_TEST_URL):', response)
      } catch (error) {
        console.log('API_TEST_URL failed, trying API_BASE_URL...')
        response = await this.request<any>('/planifications/vider', {
          method: 'POST',
        }, API_BASE_URL)
        console.log('‚úÖ Planifications vid√©es (API_BASE_URL):', response)
      }

      return response
    } catch (error) {
      console.error('‚ùå Erreur vider planifications:', error)
      throw error
    }
  }

  // ============= DASHBOARD =============

  async getDashboardStats(): Promise<DashboardStats> {
    return this.request<DashboardStats>('/stats', {}, API_DASHBOARD_URL)
  }

  async testConnection(): Promise<{ status: string }> {
    return this.request<{ status: string }>('/test', {}, API_DASHBOARD_URL)
  }

  // ============= M√âTHODES UTILITAIRES =============

  private mapPlanificationResponse(response: any[]): Planification[] {
    return response.map(planif => ({
      id: planif.id || planif.planification_id,
      orderId: planif.orderId || planif.order_id,
      employeId: planif.employeId || planif.employe_id,
      datePlanifiee: planif.datePlanifiee || planif.date_planification,
      datePlanification: planif.datePlanification || planif.date_planification,
      heureDebut: planif.heureDebut || planif.heure_debut,
      dureeMinutes: planif.dureeMinutes || planif.duree_minutes,
      terminee: planif.terminee || false,
      numeroCommande: planif.numeroCommande || planif.num_commande,
      priorite: planif.priorite,
      employeNom: planif.employeNom || planif.employe_nom,
      heureFin: planif.heureFin,
      statut: planif.statut
    }))
  }

  private mapStatus(statusNumber: number): string {
    switch (statusNumber) {
      case 1: return 'EN_ATTENTE'
      case 2: return 'PLANIFIEE'
      case 3: return 'EN_COURS'
      case 4: return 'TERMINEE'
      case 5: return 'ANNULEE'
      default: return 'EN_ATTENTE'
    }
  }
}



// ============= FONCTION UTILITAIRE =============

function showNotificationInConsole(message: string) {
  console.warn(`üîî ${message}`)
}

// ============= EXPORT =============

export const apiService = new ApiService()

// ============= INSTRUCTIONS D'UTILISATION =============

/*
‚úÖ CHANGEMENTS DANS CETTE VERSION :

1. üîß M√âTHODE UNIQUE : Une seule m√©thode getCommandes() avec fallbacks multiples
2. üîß ENDPOINTS MULTIPLES : Essaie frontend ‚Üí p√©riode ‚Üí test ‚Üí base
3. üîß GESTION D'ERREUR : Fallbacks automatiques sans crasher
4. üîß LOGS D√âTAILL√âS : Indique quel endpoint fonctionne
5. üîß COMPATIBILIT√â : Fonctionne avec tous vos endpoints existants

üìù POUR D√âPLOYER :
1. Remplacez compl√®tement votre api.ts par ce code
2. Red√©marrez le frontend (npm run dev)
3. Ouvrez l'onglet Commandes
4. Regardez la console pour voir quel endpoint fonctionne
5. Les commandes devraient s'afficher

üéØ ENDPOINTS TEST√âS (dans l'ordre) :
1. /api/frontend/commandes (donn√©es exactes)
2. /api/frontend/commandes-periode-planification (22 mai - 22 juin)
3. /api/test/commandes/dernier-mois (test)
4. /api/test/commandes (base)

Au moins l'un de ces endpoints devrait fonctionner !
*/
