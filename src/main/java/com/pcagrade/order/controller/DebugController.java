package com.pcagrade.order.controller;

import com.github.f4b6a3.ulid.Ulid;
import com.pcagrade.order.entity.Employe;
import com.pcagrade.order.entity.Commande;
import com.pcagrade.order.entity.Planification;
import com.pcagrade.order.service.EmployeService;
import com.pcagrade.order.service.PlanificationService;
import com.pcagrade.order.repository.CommandeRepository;
import com.pcagrade.order.util.UlidUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/debug")
public class DebugController {

    @Autowired
    private EmployeService employeService;

    @Autowired(required = false) // Optional si PlanificationService n'existe pas encore
    private PlanificationService planificationService;

    @Autowired
    private CommandeRepository commandeRepository;

    @GetMapping("/test-planification")
    public String testPlanification() {
        try {
            System.out.println("üß™ === TEST PLANIFICATION DEBUG ===");

            // ‚úÖ CORRIG√â : R√©cup√©ration des employ√©s
            List<Map<String, Object>> employesData = employeService.getTousEmployesActifs();
            if (employesData.isEmpty()) {
                return "‚ùå Aucun employ√© trouv√©";
            }

            // ‚úÖ CORRIG√â : R√©cup√©ration des commandes
            List<Commande> orders = commandeRepository.findAll();
            if (orders.isEmpty()) {
                return "‚ùå Aucune commande trouv√©e";
            }

            // ‚úÖ CORRIG√â : Conversion des IDs - √âviter les conversions probl√©matiques
            Map<String, Object> employeData = employesData.get(0);
            String employeIdString = (String) employeData.get("id");

            // ‚úÖ SOLUTION : Utiliser directement les IDs comme String
            Commande order = orders.get(0);
            String orderIdString = order.getId().toString();

            System.out.println("=== TEST CR√âATION PLANIFICATION ===");
            System.out.println("Employ√© ID (string): " + employeIdString);
            System.out.println("Commande ID (string): " + orderIdString);

            // ‚úÖ CORRIG√â : Test simplifi√© sans cr√©ation d'objet Planification
            if (planificationService != null) {
                System.out.println("‚úÖ PlanificationService disponible");

                // Test de la m√©thode automatique
                Map<String, Object> resultat = planificationService.executerPlanificationAutomatique();

                if ((Boolean) resultat.get("success")) {
                    return "‚úÖ Test planification r√©ussi - " + resultat.get("nombreCommandesPlanifiees") + " commandes planifi√©es";
                } else {
                    return "‚ùå √âchec test planification: " + resultat.get("erreur");
                }
            } else {
                System.out.println("‚ö†Ô∏è PlanificationService non disponible");
                return "‚úÖ Test planification basique r√©ussi - Employ√©: " + employeData.get("prenom") + " " + employeData.get("nom");
            }

        } catch (Exception e) {
            System.out.println("‚ùå ERREUR lors du test de planification:");
            System.out.println("Message: " + e.getMessage());
            e.printStackTrace();
            return "‚ùå ERREUR: " + e.getMessage();
        }
    }

    @GetMapping("/test-employes")
    public String testEmployes() {
        try {
            System.out.println("üß™ === TEST EMPLOY√âS ===");

            // ‚úÖ CORRIG√â : Utiliser la m√©thode qui existe
            List<Map<String, Object>> employes = employeService.getTousEmployesActifs();

            System.out.println("Employ√©s trouv√©s: " + employes.size());
            for (Map<String, Object> emp : employes) {
                System.out.println("  - " + emp.get("prenom") + " " + emp.get("nom") + " (" + emp.get("email") + ")");
            }

            return "‚úÖ " + employes.size() + " employ√©s trouv√©s";

        } catch (Exception e) {
            System.err.println("‚ùå Erreur test employ√©s: " + e.getMessage());
            e.printStackTrace();
            return "‚ùå ERREUR: " + e.getMessage();
        }
    }

    @GetMapping("/structure-db")
    public String decouvrirStructure() {
        try {
            employeService.decouvrirStructureDB();
            return "‚úÖ Structure DB analys√©e - voir logs";
        } catch (Exception e) {
            return "‚ùå Erreur analyse structure: " + e.getMessage();
        }
    }
}
