#!/bin/bash

# Script de test automatis√© pour l'algorithme de planification dynamique
# avec les vraies donn√©es de la table order

echo "üéØ === TEST PLANIFICATION DYNAMIQUE AVEC DONN√âES R√âELLES ==="
echo "üìÖ Date: $(date)"
echo

# Configuration
BASE_URL="http://localhost:8080/api"
DATE_ACTUELLE=$(date +%d)
MOIS_ACTUEL=$(date +%m)
ANNEE_ACTUELLE=$(date +%Y)

echo "üîß Configuration:"
echo "   ‚Ä¢ URL de base: $BASE_URL"
echo "   ‚Ä¢ Date actuelle: $DATE_ACTUELLE/$MOIS_ACTUEL/$ANNEE_ACTUELLE"
echo

# Fonction pour tester un endpoint
test_endpoint() {
    local endpoint=$1
    local description=$2
    local method=${3:-GET}
    local data=${4:-}

    echo "üì° Test: $description"
    echo "   ‚Üí $method $BASE_URL$endpoint"

    if [ "$method" = "POST" ] && [ -n "$data" ]; then
        response=$(curl -s -X POST "$BASE_URL$endpoint" \
                   -H "Content-Type: application/x-www-form-urlencoded" \
                   -d "$data" \
                   -w "\nSTATUS_CODE:%{http_code}")
    else
        response=$(curl -s -X $method "$BASE_URL$endpoint" \
                   -w "\nSTATUS_CODE:%{http_code}")
    fi

    # Extraire le code de statut
    status_code=$(echo "$response" | grep "STATUS_CODE:" | cut -d: -f2)
    json_response=$(echo "$response" | grep -v "STATUS_CODE:")

    if [ "$status_code" = "200" ]; then
        echo "   ‚úÖ Succ√®s (200)"

        # Extraire des informations cl√©s du JSON si possible
        if command -v jq &> /dev/null; then
            success=$(echo "$json_response" | jq -r '.success // "N/A"')
            message=$(echo "$json_response" | jq -r '.message // "N/A"')

            if [ "$success" = "true" ]; then
                echo "   üìä R√©sultat: Succ√®s"

                # Afficher des statistiques si disponibles
                nombre_planifications=$(echo "$json_response" | jq -r '.nombrePlanifications // "N/A"')
                methode=$(echo "$json_response" | jq -r '.methode // "N/A"')
                temps=$(echo "$json_response" | jq -r '.tempsCalculMs // "N/A"')

                if [ "$nombre_planifications" != "N/A" ]; then
                    echo "   üìã Planifications cr√©√©es: $nombre_planifications"
                fi
                if [ "$methode" != "N/A" ]; then
                    echo "   üßÆ M√©thode utilis√©e: $methode"
                fi
                if [ "$temps" != "N/A" ]; then
                    echo "   ‚è±Ô∏è Temps de calcul: ${temps}ms"
                fi
            else
                echo "   ‚ùå √âchec: $message"
            fi
        else
            echo "   üìÑ R√©ponse JSON re√ßue (installez jq pour plus de d√©tails)"
        fi
    else
        echo "   ‚ùå Erreur HTTP $status_code"
        if [ -n "$json_response" ]; then
            echo "   üìÑ D√©tails: $json_response"
        fi
    fi

    echo
}

# Tests progressifs

echo "üîç === PHASE 1: DIAGNOSTIC DES DONN√âES ==="
test_endpoint "/test-planification/diagnostic" "Diagnostic des donn√©es disponibles"

echo "üß™ === PHASE 2: TESTS BASIQUES ==="
test_endpoint "/test-planification/test-rapide" "Test rapide avec donn√©es d'aujourd'hui"

echo "üìÖ === PHASE 3: TESTS AVEC DATES SP√âCIFIQUES ==="
test_endpoint "/test-planification/test-date" "Test avec date actuelle" "POST" "jour=$DATE_ACTUELLE&mois=$MOIS_ACTUEL&annee=$ANNEE_ACTUELLE"

# Test avec le d√©but du mois
DEBUT_MOIS=1
test_endpoint "/test-planification/test-date" "Test depuis d√©but du mois" "POST" "jour=$DEBUT_MOIS&mois=$MOIS_ACTUEL&annee=$ANNEE_ACTUELLE"

echo "üîç === PHASE 4: V√âRIFICATION D√âTAILL√âE ==="
test_endpoint "/test-planification/verifier-donnees" "V√©rification des donn√©es" "POST" "jour=$DEBUT_MOIS&mois=$MOIS_ACTUEL&annee=$ANNEE_ACTUELLE"

echo "‚ö° === PHASE 5: TESTS DE PERFORMANCE ==="
test_endpoint "/test-planification/test-performance" "Tests de performance comparatifs" "POST"

echo "üéØ === PHASE 6: TEST PLANIFICATION DP DIRECTE ==="
test_endpoint "/planification-dp/executer" "Ex√©cution directe DP" "POST" "jour=$DEBUT_MOIS&mois=$MOIS_ACTUEL&annee=$ANNEE_ACTUELLE"

echo "üìä === R√âSUM√â DES TESTS ==="
echo "‚úÖ Tests termin√©s √† $(date)"
echo
echo "üîß UTILISATION MANUELLE:"
echo "   ‚Ä¢ Diagnostic: curl -X GET $BASE_URL/test-planification/diagnostic"
echo "   ‚Ä¢ Test rapide: curl -X GET $BASE_URL/test-planification/test-rapide"
echo "   ‚Ä¢ Test date: curl -X POST $BASE_URL/test-planification/test-date -d 'jour=1&mois=$MOIS_ACTUEL&annee=$ANNEE_ACTUELLE'"
echo
echo "üìã ENDPOINTS DISPONIBLES:"
echo "   ‚Ä¢ GET  /api/test-planification/diagnostic"
echo "   ‚Ä¢ GET  /api/test-planification/test-rapide"
echo "   ‚Ä¢ POST /api/test-planification/test-date"
echo "   ‚Ä¢ POST /api/test-planification/verifier-donnees"
echo "   ‚Ä¢ POST /api/test-planification/test-performance"
echo "   ‚Ä¢ POST /api/planification-dp/executer"
echo
echo "üí° CONSEILS:"
echo "   ‚Ä¢ V√©rifiez d'abord le diagnostic pour voir les donn√©es disponibles"
echo "   ‚Ä¢ Utilisez test-rapide pour un test simple"
echo "   ‚Ä¢ Ajustez les dates selon vos donn√©es en base"
echo "   ‚Ä¢ Consultez les logs de l'application Spring Boot pour plus de d√©tails"